{"version":3,"sources":["components/WeatherCard.js","components/SearchBar.js","App.js","index.js"],"names":["WeatherCard","props","useState","currentUnit","setCurrentUnit","temperature","setTemperature","minimumTemperature","minimumtemperature","setMinimumTemperature","maximumTemperature","setMaximumTemperature","useEffect","id","cityName","toUpperCase","onClick","className","src","weatherIcon","alt","weatherDescription","weatherMain","Math","round","SearchBar","inputValue","setInputValue","errorMessage","hasError","type","value","onChange","e","target","lookUpWeatherInformation","API_KEY","process","App","setHasError","weather","setWeather","setToDefaultWeatherInformation","a","fetchWeatherInformationWithCity","response","filterWeatherInformation","weatherInformation","setToUserLocation","navigator","geolocation","getCurrentPosition","fetchWeatherInformationWithCoordinates","timeout","city","position","console","log","coords","latitude","longitude","fetch","mode","json","responseData","main","description","icon","temp","name","Error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a57d38f6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './WeatherCard.css';\n\nconst WeatherCard = (props) => {\n\tconst [currentUnit, setCurrentUnit] = useState('C');\n\tconst [temperature, setTemperature] = useState(props.temperature - 273);\n\tconst [minimumtemperature, setMinimumTemperature] = useState(\n\t\tprops.minimumTemperature - 273\n\t);\n\tconst [maximumTemperature, setMaximumTemperature] = useState(\n\t\tprops.maximumTemperature - 273\n\t);\n\n\tconst switchToFahrenheit = () => {\n\t\tsetCurrentUnit('F');\n\t};\n\n\tconst switchToCelsius = () => {\n\t\tsetCurrentUnit('C');\n\t};\n\n\tuseEffect(() => {\n\t\tif (currentUnit === 'C') {\n\t\t\tsetTemperature(props.temperature - 273);\n\t\t\tsetMinimumTemperature(props.minimumTemperature - 273);\n\t\t\tsetMaximumTemperature(props.maximumTemperature - 273);\n\t\t} else {\n\t\t\tsetTemperature(props.temperature * (9 / 5) - 459.67);\n\t\t\tsetMinimumTemperature(props.minimumTemperature * (9 / 5) - 459.67);\n\t\t\tsetMaximumTemperature(props.maximumTemperature * (9 / 5) - 459.67);\n\t\t}\n\t}, [\n\t\tcurrentUnit,\n\t\tprops.temperature,\n\t\tprops.maximumTemperature,\n\t\tprops.minimumTemperature,\n\t]);\n\n\treturn (\n\t\t<div id=\"weather-card\">\n\t\t\t<div id=\"city-name\">\n\t\t\t\t<h2>{props.cityName.toUpperCase()}</h2>\n\t\t\t</div>\n\t\t\t<div id=\"toggle-units-buttons\">\n\t\t\t\t<button\n\t\t\t\t\tonClick={switchToCelsius}\n\t\t\t\t\tclassName={currentUnit === 'C' ? 'active' : 'inactive'}\n\t\t\t\t>\n\t\t\t\t\t°C\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={switchToFahrenheit}\n\t\t\t\t\tclassName={currentUnit === 'F' ? 'active' : 'inactive'}\n\t\t\t\t>\n\t\t\t\t\t°F\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div id=\"icon\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={`https://openweathermap.org/img/wn/${props.weatherIcon}@2x.png`}\n\t\t\t\t\talt={props.weatherDescription}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div id=\"weather-conditions\">\n\t\t\t\t<span id=\"weather-main\">{props.weatherMain}</span>\n\t\t\t\t<br></br>\n\t\t\t\t<span id=\"weather-description\">{props.weatherDescription}</span>\n\t\t\t</div>\n\t\t\t<div id=\"temperatures\">\n\t\t\t\t<div id=\"main-temperature\">\n\t\t\t\t\t<span>{Math.round(temperature)}°</span>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"min-max-temperatures\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{Math.round(minimumtemperature)}° | {Math.round(maximumTemperature)}\n\t\t\t\t\t\t°F\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nWeatherCard.propTypes = {\n\tcityName: PropTypes.string,\n\tweatherIcon: PropTypes.string,\n\tweatherDescription: PropTypes.string,\n\tweatherMain: PropTypes.string,\n\ttemperature: PropTypes.number,\n\tminimumTemperature: PropTypes.number,\n\tmaximumTemperature: PropTypes.number,\n};\n\nexport default WeatherCard;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchBar.css';\n\nconst SearchBar = (props) => {\n\tconst [inputValue, setInputValue] = useState('');\n\tconst errorMessage = props.hasError ? (\n\t\t<div id=\"error-message\">\n\t\t\t<span>Location could not be found</span>\n\t\t</div>\n\t) : null;\n\tconst handleSearchClick = () => {\n\t\tprops.lookUpWeatherInformation(inputValue);\n\t};\n\n\treturn (\n\t\t<div id=\"search-bar\">\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={(e) => setInputValue(e.target.value)}\n\t\t\t></input>\n\t\t\t<br></br>\n\t\t\t{errorMessage}\n\t\t\t<div id=\"search-button\">\n\t\t\t\t<button onClick={handleSearchClick}>Search</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nSearchBar.propTypes = {\n\thasError: PropTypes.bool,\n\tlookUpWeatherInformation: PropTypes.func,\n};\n\nexport default SearchBar;\n","import React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport SearchBar from './components/SearchBar';\nimport './App.css';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst App = () => {\n\tconst [hasError, setHasError] = useState(false);\n\tconst [weather, setWeather] = useState({\n\t\tweatherMain: '--',\n\t\tweatherDescription: '--',\n\t\tweatherIcon: '01d',\n\t\ttemperature: 273,\n\t\tminimumTemperature: 273,\n\t\tmaximumTemperature: 273,\n\t\tcityName: '--',\n\t});\n\n\tconst setToDefaultWeatherInformation = async () => {\n\t\ttry {\n\t\t\tconst response = await fetchWeatherInformationWithCity('San Francisco');\n\t\t\tconst weatherInformation = await filterWeatherInformation(response);\n\t\t\tsetHasError(false);\n\t\t\tsetWeather(weatherInformation);\n\t\t} catch (error) {\n\t\t\tsetHasError(true);\n\t\t}\n\t};\n\n\tconst setToUserLocation = async () => {\n\t\tlet weatherInformation;\n\t\tif (navigator.geolocation) {\n\t\t\ttry {\n\t\t\t\tconst response = navigator.geolocation.getCurrentPosition(\n          fetchWeatherInformationWithCoordinates,\n          null,\n          { timeout: 1000 },\n\t\t\t\t);\n\t\t\t\tweatherInformation = await filterWeatherInformation(response);\n\t\t\t\tsetHasError(false);\n\t\t\t\tsetWeather(weatherInformation);\n\t\t\t} catch (error) {\n\t\t\t\tsetToDefaultWeatherInformation();\n\t\t\t}\n\t\t} else {\n\t\t\tsetToDefaultWeatherInformation();\n\t\t}\n\t};\n\n\tconst lookUpWeatherInformation = async (city) => {\n\t\ttry {\n\t\t\tconst response = await fetchWeatherInformationWithCity(city);\n\t\t\tconst weatherInformation = await filterWeatherInformation(response);\n\t\t\tsetHasError(false);\n\t\t\tsetWeather(weatherInformation);\n\t\t} catch (error) {\n\t\t\tsetHasError(true);\n\t\t}\n\t};\n\n\tconst fetchWeatherInformationWithCoordinates = async (position) => {\n    console.log(position.coords.latitude, position.coords.longitude);\n\t\treturn await fetch(\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${API_KEY}`,\n\t\t\t{\n\t\t\t\tmode: 'cors',\n\t\t\t}\n\t\t);\n\t};\n\n\tconst fetchWeatherInformationWithCity = async (city) => {\n\t\treturn await fetch(\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`,\n\t\t\t{\n\t\t\t\tmode: 'cors',\n\t\t\t}\n\t\t);\n  };\n  \n  useEffect(() => {\n    setToUserLocation();\n  }, []);\n\n\tconst filterWeatherInformation = async (response) => {\n\t\ttry {\n\t\t\tconst responseData = await response.json();\n\t\t\treturn {\n\t\t\t\tweatherMain: responseData.weather[0].main,\n\t\t\t\tweatherDescription: responseData.weather[0].description,\n\t\t\t\tweatherIcon: responseData.weather[0].icon,\n\t\t\t\ttemperature: responseData.main.temp,\n\t\t\t\tminimumTemperature: responseData.main['temp_min'],\n\t\t\t\tmaximumTemperature: responseData.main['temp_max'],\n\t\t\t\tcityName: responseData.name,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthrow new Error('Not able to convert fetch to json');\n\t\t}\n\t};\n  \n\treturn (\n\t\t<div\n\t\t\tid=\"App\"\n\t\t\tclassName={weather.weatherMain !== '--' ? weather.weatherMain : 'Generic'}\n\t\t>\n\t\t\t<WeatherCard\n\t\t\t\tweatherMain={weather.weatherMain}\n\t\t\t\tweatherDescription={weather.weatherDescription}\n\t\t\t\tweatherIcon={weather.weatherIcon}\n\t\t\t\ttemperature={weather.temperature}\n\t\t\t\tminimumTemperature={weather.minimumTemperature}\n\t\t\t\tmaximumTemperature={weather.maximumTemperature}\n\t\t\t\tcityName={weather.cityName}\n\t\t\t/>\n\t\t\t<SearchBar\n\t\t\t\thasError={hasError}\n\t\t\t\tlookUpWeatherInformation={lookUpWeatherInformation}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}